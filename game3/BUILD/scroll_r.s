;
; File generated by cc65 v 2.19 - Git fcda94f
;
	.fopt		compiler,"cc65 v 2.19 - Git fcda94f"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_all
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_unrle
	.import		_memcpy
	.import		_delay
	.import		_set_vram_buffer
	.import		_clear_vram_buffer
	.import		_get_frame_count
	.import		_pal_fade_to
	.import		_set_scroll_x
	.import		_set_scroll_y
	.import		_get_ppu_addr
	.import		_set_data_pointer
	.import		_set_mt_pointer
	.import		_buffer_4_mt
	.import		_flush_vram_update_nmi
	.export		_RoundSprL
	.export		_RoundSprR
	.export		_ball1
	.export		_ball2
	.export		_ball3
	.export		_ball4
	.export		_bigball1
	.export		_bigball2
	.export		_bigball3
	.export		_bigball4
	.export		_mound
	.export		_endSprite
	.export		_skier
	.export		_mounds
	.export		_pointer
	.export		_pad1
	.export		_collision
	.export		_collision_L
	.export		_collision_R
	.export		_collision_U
	.export		_collision_D
	.export		_coordinates
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_temp5
	.export		_temp6
	.export		_temp_x
	.export		_temp_y
	.export		_eject_L
	.export		_eject_R
	.export		_eject_D
	.export		_eject_U
	.export		_direction
	.export		_address
	.export		_x
	.export		_y
	.export		_k
	.export		_i
	.export		_nt
	.export		_index
	.export		_index2
	.export		_room
	.export		_map
	.export		_scroll_x
	.export		_scroll_y
	.export		_scroll_count
	.export		_pseudo_scroll_x
	.export		_L_R_switch
	.export		_old_x
	.export		_old_y
	.export		_c_map
	.export		_c_map2
	.export		_Generic
	.export		_Generic2
	.export		_sball
	.export		_brotate
	.export		_bigbrotate
	.export		_BoxGuy1
	.export		_palettetitle
	.export		_palette_bg
	.export		_palette_sp
	.export		_enemypal
	.export		_paletter
	.export		_winpal
	.export		_losepal
	.export		_metatiles1
	.export		_metatiles3
	.export		_room1
	.export		_room2
	.export		_room3
	.export		_room4
	.export		_room5
	.export		_room6
	.export		_TitleScreen
	.export		_winscreen
	.export		_losescreen
	.export		_Rooms
	.export		_mound_x
	.export		_mound_y
	.export		_mound_active
	.export		_mound_room
	.export		_mound_actual_x
	.export		_level_1_mounds
	.export		_enemy_x
	.export		_enemy_y
	.export		_enemy_active
	.export		_enemy_room
	.export		_enemy_actual_y
	.export		_enemy_actual_x
	.export		_level_1_enemies
	.export		_load_room
	.export		_draw_sprites
	.export		_movement
	.export		_bg_collision
	.export		_draw_screen_R
	.export		_new_cmap
	.export		_bg_collision_sub
	.export		_show_title_screen
	.export		_show_win_screen
	.export		_show_lose_screen
	.export		_check_spr_objects
	.export		_get_position
	.export		_sprite_obj_init
	.export		_skier_move
	.export		_main

.segment	"DATA"

_sball:
	.word	$4000
	.word	$7100
	.res	6,$00
_BoxGuy1:
	.word	$4000
	.word	$6100
	.res	4,$00

.segment	"RODATA"

_RoundSprL:
	.byte	$FF
	.byte	$FF
	.byte	$02
	.byte	$00
	.byte	$07
	.byte	$FF
	.byte	$03
	.byte	$00
	.byte	$FF
	.byte	$07
	.byte	$12
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$13
	.byte	$00
	.byte	$80
_RoundSprR:
	.byte	$FF
	.byte	$FF
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$FF
	.byte	$01
	.byte	$00
	.byte	$FF
	.byte	$07
	.byte	$10
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$11
	.byte	$00
	.byte	$80
_ball1:
	.byte	$F1
	.byte	$F4
	.byte	$10
	.byte	$00
	.byte	$80
_ball2:
	.byte	$F1
	.byte	$F4
	.byte	$11
	.byte	$00
	.byte	$80
_ball3:
	.byte	$F1
	.byte	$F4
	.byte	$12
	.byte	$00
	.byte	$80
_ball4:
	.byte	$F1
	.byte	$F4
	.byte	$13
	.byte	$00
	.byte	$80
_bigball1:
	.byte	$F8
	.byte	$F8
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$F8
	.byte	$21
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$31
	.byte	$00
	.byte	$F8
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$80
_bigball2:
	.byte	$00
	.byte	$F8
	.byte	$20
	.byte	$40
	.byte	$F8
	.byte	$F8
	.byte	$21
	.byte	$40
	.byte	$F8
	.byte	$00
	.byte	$31
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$40
	.byte	$80
_bigball3:
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$C0
	.byte	$F8
	.byte	$00
	.byte	$21
	.byte	$C0
	.byte	$F8
	.byte	$F8
	.byte	$31
	.byte	$C0
	.byte	$00
	.byte	$F8
	.byte	$30
	.byte	$C0
	.byte	$80
_bigball4:
	.byte	$F8
	.byte	$00
	.byte	$20
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$21
	.byte	$80
	.byte	$00
	.byte	$F8
	.byte	$31
	.byte	$80
	.byte	$F8
	.byte	$F8
	.byte	$30
	.byte	$80
	.byte	$80
_mound:
	.byte	$F8
	.byte	$00
	.byte	$14
	.byte	$00
	.byte	$80
_endSprite:
	.byte	$00
	.byte	$F0
	.byte	$1B
	.byte	$01
	.byte	$00
	.byte	$F8
	.byte	$1B
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$1B
	.byte	$01
	.byte	$80
_skier:
	.byte	$F8
	.byte	$F8
	.byte	$15
	.byte	$00
	.byte	$00
	.byte	$F8
	.byte	$16
	.byte	$00
	.byte	$F8
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$19
	.byte	$00
	.byte	$80
_brotate:
	.addr	_ball1
	.addr	_ball2
	.addr	_ball3
	.addr	_ball4
_bigbrotate:
	.addr	_bigball1
	.addr	_bigball2
	.addr	_bigball3
	.addr	_bigball4
_palettetitle:
	.byte	$0F
	.byte	$01
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$0F
	.byte	$07
	.byte	$19
	.byte	$29
	.res	4,$00
_palette_bg:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$0F
	.byte	$07
	.byte	$17
	.byte	$27
	.byte	$0F
	.byte	$02
	.byte	$12
	.byte	$22
	.byte	$0F
	.byte	$09
	.byte	$19
	.byte	$29
_palette_sp:
	.byte	$0F
	.byte	$07
	.byte	$28
	.byte	$38
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_enemypal:
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_paletter:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$0F
	.byte	$01
	.byte	$21
	.byte	$30
	.byte	$0F
	.byte	$07
	.byte	$16
	.byte	$26
	.byte	$0F
	.byte	$09
	.byte	$19
	.byte	$29
_winpal:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$0F
	.byte	$01
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$0F
	.byte	$05
	.byte	$0C
	.byte	$28
_losepal:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$0F
	.byte	$01
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$0F
	.byte	$05
	.byte	$0C
	.byte	$28
_metatiles1:
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$02
	.byte	$05
	.byte	$06
	.byte	$08
	.byte	$07
	.byte	$01
	.byte	$05
	.byte	$06
	.byte	$08
	.byte	$07
	.byte	$00
_metatiles3:
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
_room1:
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$02
_room2:
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$02
_room3:
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$02
_room4:
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
_room5:
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
_room6:
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
_TitleScreen:
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$0B
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$0B
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$0B
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$0B
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$0D
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$0B
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$05
	.byte	$02
	.byte	$00
	.byte	$2C
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$0D
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$0D
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$0D
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$0D
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$0D
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$0A
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$2A
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$14
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$0D
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$0D
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$0D
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$0D
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$0D
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$0D
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$0D
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$00
	.byte	$7E
	.byte	$09
	.byte	$00
	.byte	$00
_winscreen:
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$1F
	.byte	$03
	.byte	$04
	.byte	$06
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$07
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$05
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$01
	.byte	$04
	.byte	$06
	.byte	$03
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$07
	.byte	$03
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$25
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$17
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$07
	.byte	$59
	.byte	$4F
	.byte	$55
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$0B
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$07
	.byte	$57
	.byte	$49
	.byte	$4E
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$0B
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$17
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$04
	.byte	$17
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$04
	.byte	$13
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$05
	.byte	$01
	.byte	$04
	.byte	$15
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$05
	.byte	$01
	.byte	$04
	.byte	$09
	.byte	$02
	.byte	$04
	.byte	$0D
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$04
	.byte	$05
	.byte	$02
	.byte	$04
	.byte	$0D
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$0F
	.byte	$01
	.byte	$04
	.byte	$09
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$0F
	.byte	$01
	.byte	$04
	.byte	$09
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$11
	.byte	$01
	.byte	$04
	.byte	$0D
	.byte	$02
	.byte	$04
	.byte	$11
	.byte	$01
	.byte	$04
	.byte	$11
	.byte	$02
	.byte	$04
	.byte	$05
	.byte	$01
	.byte	$04
	.byte	$05
	.byte	$02
	.byte	$04
	.byte	$03
	.byte	$C5
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$C9
	.byte	$CA
	.byte	$02
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$04
	.byte	$05
	.byte	$02
	.byte	$04
	.byte	$05
	.byte	$01
	.byte	$04
	.byte	$05
	.byte	$C5
	.byte	$04
	.byte	$03
	.byte	$D5
	.byte	$D6
	.byte	$D7
	.byte	$D8
	.byte	$D9
	.byte	$DA
	.byte	$C3
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$04
	.byte	$17
	.byte	$03
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$1C
	.byte	$03
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$1C
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$1C
	.byte	$03
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$1C
	.byte	$03
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$24
	.byte	$02
	.byte	$04
	.byte	$7F
	.byte	$55
	.byte	$04
	.byte	$08
	.byte	$D5
	.byte	$75
	.byte	$55
	.byte	$55
	.byte	$DD
	.byte	$55
	.byte	$77
	.byte	$55
	.byte	$04
	.byte	$03
	.byte	$D5
	.byte	$DD
	.byte	$FD
	.byte	$57
	.byte	$D5
	.byte	$FD
	.byte	$FF
	.byte	$FF
	.byte	$7F
	.byte	$55
	.byte	$57
	.byte	$7F
	.byte	$5D
	.byte	$DF
	.byte	$FF
	.byte	$5F
	.byte	$DF
	.byte	$F5
	.byte	$04
	.byte	$02
	.byte	$55
	.byte	$04
	.byte	$03
	.byte	$99
	.byte	$AA
	.byte	$04
	.byte	$02
	.byte	$55
	.byte	$04
	.byte	$03
	.byte	$59
	.byte	$5A
	.byte	$04
	.byte	$02
	.byte	$05
	.byte	$04
	.byte	$06
	.byte	$05
	.byte	$04
	.byte	$00
_losescreen:
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$1F
	.byte	$03
	.byte	$04
	.byte	$06
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$07
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$05
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$07
	.byte	$03
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$07
	.byte	$03
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$65
	.byte	$03
	.byte	$04
	.byte	$07
	.byte	$01
	.byte	$04
	.byte	$17
	.byte	$03
	.byte	$04
	.byte	$07
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$07
	.byte	$01
	.byte	$04
	.byte	$09
	.byte	$03
	.byte	$04
	.byte	$0B
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$59
	.byte	$4F
	.byte	$55
	.byte	$02
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$04
	.byte	$09
	.byte	$03
	.byte	$04
	.byte	$0B
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$50
	.byte	$55
	.byte	$44
	.byte	$44
	.byte	$4C
	.byte	$45
	.byte	$44
	.byte	$01
	.byte	$04
	.byte	$07
	.byte	$03
	.byte	$04
	.byte	$0D
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$4F
	.byte	$55
	.byte	$54
	.byte	$02
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$04
	.byte	$07
	.byte	$03
	.byte	$04
	.byte	$0D
	.byte	$01
	.byte	$04
	.byte	$11
	.byte	$03
	.byte	$04
	.byte	$0D
	.byte	$01
	.byte	$04
	.byte	$0E
	.byte	$03
	.byte	$04
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$93
	.byte	$07
	.byte	$07
	.byte	$01
	.byte	$04
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$01
	.byte	$04
	.byte	$13
	.byte	$07
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$07
	.byte	$07
	.byte	$01
	.byte	$04
	.byte	$17
	.byte	$03
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$1C
	.byte	$03
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$10
	.byte	$90
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$09
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$10
	.byte	$02
	.byte	$A0
	.byte	$01
	.byte	$04
	.byte	$09
	.byte	$03
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$16
	.byte	$09
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$03
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$12
	.byte	$09
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$0C
	.byte	$02
	.byte	$04
	.byte	$0D
	.byte	$09
	.byte	$04
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$6D
	.byte	$55
	.byte	$04
	.byte	$0C
	.byte	$95
	.byte	$A5
	.byte	$65
	.byte	$DD
	.byte	$FF
	.byte	$77
	.byte	$55
	.byte	$95
	.byte	$AA
	.byte	$04
	.byte	$02
	.byte	$55
	.byte	$04
	.byte	$02
	.byte	$59
	.byte	$9A
	.byte	$AA
	.byte	$04
	.byte	$02
	.byte	$55
	.byte	$04
	.byte	$03
	.byte	$99
	.byte	$9A
	.byte	$AA
	.byte	$6A
	.byte	$55
	.byte	$04
	.byte	$02
	.byte	$75
	.byte	$99
	.byte	$AA
	.byte	$04
	.byte	$02
	.byte	$55
	.byte	$04
	.byte	$03
	.byte	$59
	.byte	$5A
	.byte	$04
	.byte	$02
	.byte	$05
	.byte	$04
	.byte	$06
	.byte	$05
	.byte	$04
	.byte	$00
_Rooms:
	.addr	_room1
	.addr	_room2
	.addr	_room3
	.addr	_room4
	.addr	_room5
	.addr	_room6
_level_1_mounds:
	.byte	$61
	.byte	$00
	.byte	$65
	.byte	$81
	.byte	$01
	.byte	$85
	.byte	$61
	.byte	$02
	.byte	$95
	.byte	$61
	.byte	$03
	.byte	$75
	.byte	$81
	.byte	$04
	.byte	$85
	.byte	$61
	.byte	$05
	.byte	$25
	.byte	$FF
_level_1_enemies:
	.byte	$C2
	.byte	$00
	.byte	$B0
	.byte	$C2
	.byte	$02
	.byte	$C0
	.byte	$C2
	.byte	$03
	.byte	$F0
	.byte	$FF

.segment	"BSS"

.segment	"ZEROPAGE"
_mounds:
	.res	1,$00
_pointer:
	.res	2,$00
_pad1:
	.res	1,$00
_collision:
	.res	1,$00
_collision_L:
	.res	1,$00
_collision_R:
	.res	1,$00
_collision_U:
	.res	1,$00
_collision_D:
	.res	1,$00
_coordinates:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp5:
	.res	2,$00
_temp6:
	.res	2,$00
_temp_x:
	.res	1,$00
_temp_y:
	.res	1,$00
_eject_L:
	.res	1,$00
_eject_R:
	.res	1,$00
_eject_D:
	.res	1,$00
_eject_U:
	.res	1,$00
_direction:
	.res	1,$00
_address:
	.res	2,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
_k:
	.res	1,$00
_i:
	.res	1,$00
_nt:
	.res	1,$00
_index:
	.res	1,$00
_index2:
	.res	1,$00
_room:
	.res	1,$00
_map:
	.res	1,$00
_scroll_x:
	.res	2,$00
_scroll_y:
	.res	2,$00
_scroll_count:
	.res	1,$00
_pseudo_scroll_x:
	.res	2,$00
_L_R_switch:
	.res	1,$00
_old_x:
	.res	2,$00
_old_y:
	.res	2,$00
.segment	"BSS"
_c_map:
	.res	240,$00
_c_map2:
	.res	240,$00
_Generic:
	.res	4,$00
_Generic2:
	.res	4,$00
_mound_x:
	.res	16,$00
_mound_y:
	.res	16,$00
_mound_active:
	.res	16,$00
_mound_room:
	.res	16,$00
_mound_actual_x:
	.res	16,$00
_enemy_x:
	.res	17,$00
_enemy_y:
	.res	17,$00
_enemy_active:
	.res	17,$00
_enemy_room:
	.res	17,$00
_enemy_actual_y:
	.res	17,$00
_enemy_actual_x:
	.res	17,$00

; ---------------------------------------------------------------
; void __near__ load_room (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_room: near

.segment	"CODE"

;
; pal_bg(paletter);
;
	lda     #<(_paletter)
	ldx     #>(_paletter)
	jsr     _pal_bg
;
; set_data_pointer(Rooms[0]);
;
	lda     _Rooms
	ldx     _Rooms+1
	jsr     _set_data_pointer
;
; set_mt_pointer(metatiles3);
;
	lda     #<(_metatiles3)
	ldx     #>(_metatiles3)
	jsr     _set_mt_pointer
;
; for(y=0; ;y+=0x20){
;
	lda     #$00
L0014:	sta     _y
;
; for(x=0; ;x+=0x20){
;
	lda     #$00
L0013:	sta     _x
;
; clear_vram_buffer(); // do each frame, and before putting anything in the buffer
;
	jsr     _clear_vram_buffer
;
; address = get_ppu_addr(0, x, y);
;
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + (x >> 4);
;
	lda     _y
	and     #$F0
	sta     ptr1
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update_nmi();
;
	jsr     _flush_vram_update_nmi
;
; if (x == 0xe0) break;
;
	lda     _x
	cmp     #$E0
	beq     L0016
;
; for(x=0; ;x+=0x20){
;
	lda     #$20
	clc
	adc     _x
	jmp     L0013
;
; if (y == 0xe0) break;
;
L0016:	lda     _y
	cmp     #$E0
	beq     L0003
;
; for(y=0; ;y+=0x20){
;
	lda     #$20
	clc
	adc     _y
	jmp     L0014
;
; set_data_pointer(Rooms[1]);
;
L0003:	lda     _Rooms+2
	ldx     _Rooms+2+1
	jsr     _set_data_pointer
;
; for(y=0; ;y+=0x20){
;
	lda     #$00
L0015:	sta     _y
;
; x = 0;
;
	lda     #$00
	sta     _x
;
; clear_vram_buffer(); // do each frame, and before putting anything in the buffer
;
	jsr     _clear_vram_buffer
;
; address = get_ppu_addr(1, x, y);
;
	jsr     decsp2
	lda     #$01
	tay
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0);
;
	lda     _y
	and     #$F0
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update_nmi();
;
	jsr     _flush_vram_update_nmi
;
; if (y == 0xe0) break;
;
	lda     _y
	cmp     #$E0
	beq     L000D
;
; for(y=0; ;y+=0x20){
;
	lda     #$20
	clc
	adc     _y
	jmp     L0015
;
; clear_vram_buffer();
;
L000D:	jsr     _clear_vram_buffer
;
; memcpy (c_map, room1, 240);
;
	ldy     #$00
L0011:	lda     _room1,y
	sta     _c_map,y
	iny
	cpy     #$F0
	bne     L0011
;
; sprite_obj_init();
;
	jmp     _sprite_obj_init

.endproc

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; temp_x = high_byte(sball.x);
;
	lda     _sball+1
	sta     _temp_x
;
; temp_y = high_byte(sball.y);
;
	lda     _sball+3
	sta     _temp_y
;
; oam_meta_spr(temp_x,temp_y,bigbrotate[k]); 
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	ldx     #$00
	lda     _k
	asl     a
	bcc     L001C
	inx
	clc
L001C:	adc     #<(_bigbrotate)
	sta     ptr1
	txa
	adc     #>(_bigbrotate)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
;
; for(index = 0; index < MAX_MOUNDS; ++index){
;
	lda     #$00
	sta     _index
L001D:	lda     _index
	cmp     #$10
	bcs     L001F
;
; temp_y = mound_y[index];
;
	ldy     _index
	lda     _mound_y,y
	sta     _temp_y
;
; if(temp_y == TURN_OFF) continue;
;
	cmp     #$FF
	beq     L001E
;
; if(get_frame_count() & 8) ++temp_y; 
;
	jsr     _get_frame_count
	and     #$08
	beq     L0008
	inc     _temp_y
;
; if(!mound_active[index]) continue;
;
L0008:	ldy     _index
	lda     _mound_active,y
	beq     L001E
;
; temp_x = mound_x[index];
;
	ldy     _index
	lda     _mound_x,y
	sta     _temp_x
;
; if(temp_x > 0xf0) continue;
;
	cmp     #$F1
	bcs     L001E
;
; if(temp_y < 0xf0) {
;
	lda     _temp_y
	cmp     #$F0
	bcs     L001E
;
; oam_meta_spr(temp_x, temp_y, mound);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mound)
	ldx     #>(_mound)
	jsr     _oam_meta_spr
;
; for(index = 0; index < MAX_MOUNDS; ++index){
;
L001E:	inc     _index
	jmp     L001D
;
; for(index = 0; index < MAX_ENEMY; ++index){
;
L001F:	lda     #$00
	sta     _index
L0020:	lda     _index
	cmp     #$11
	bcs     L000F
;
; temp_y = enemy_y[index];
;
	ldy     _index
	lda     _enemy_y,y
	sta     _temp_y
;
; if(temp_y == TURN_OFF) continue;
;
	cmp     #$FF
	beq     L0024
;
; temp1 = enemy_active[index];
;
	ldy     _index
	lda     _enemy_active,y
	sta     _temp1
;
; temp2 = enemy_x[index];
;
	ldy     _index
	lda     _enemy_x,y
	sta     _temp2
;
; if(temp2 > 0xf0) continue;
;
	cmp     #$F1
	bcs     L0024
;
; if(temp1 && (temp_y < 0xf0)) {
;
	lda     _temp1
	beq     L0024
	lda     _temp_y
	cmp     #$F0
	bcs     L0024
;
; oam_meta_spr(temp2, temp_y, skier);
;
	jsr     decsp2
	lda     _temp2
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_skier)
	ldx     #>(_skier)
	jsr     _oam_meta_spr
;
; for(index = 0; index < MAX_ENEMY; ++index){
;
L0024:	inc     _index
	jmp     L0020
;
; }
;
L000F:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

.segment	"CODE"

;
; old_x = sball.x;
;
	lda     _sball+1
	sta     _old_x+1
	lda     _sball
	sta     _old_x
;
; if (pad1 & PAD_RIGHT){
;
	lda     _pad1
	and     #$01
	beq     L0006
;
; direction = RIGHT;
;
	lda     #$01
	sta     _direction
;
; sball.vel_x = SPEED;
;
	sta     _sball+4+1
	lda     #$80
	sta     _sball+4
;
; if (k != 3 & i%7 ==0){
;
	lda     _k
	cmp     #$03
	jsr     boolne
	jsr     pusha0
	lda     _i
	jsr     pusha0
	lda     #$07
	jsr     tosumoda0
	cpx     #$00
	bne     L0004
	cmp     #$00
L0004:	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L0032
;
; k++;
;
	inc     _k
;
; else if(k==3){
;
	jmp     L0006
L0032:	lda     _k
	cmp     #$03
	bne     L0006
;
; k=0;}
;
	lda     #$00
	sta     _k
;
; sball.x += sball.vel_x;
;
L0006:	lda     _sball+4
	clc
	adc     _sball
	sta     _sball
	lda     _sball+4+1
	adc     _sball+1
	sta     _sball+1
;
; i++;
;
	inc     _i
;
; if((sball.x < 0x100)||(sball.x > 0xf800)) { // make sure no wrap around to the other side
;
	ldx     _sball+1
	cpx     #$01
	bcc     L0033
	lda     _sball
	cmp     #$01
	lda     _sball+1
	sbc     #$F8
	bcc     L0034
;
; sball.x = 0x100;
;
L0033:	ldx     #$01
	lda     #$00
	sta     _sball
	stx     _sball+1
;
; L_R_switch = 1; // shinks the y values in bg_coll, less problems with head / feet collisions
;
L0034:	lda     #$01
	sta     _L_R_switch
;
; Generic.x = high_byte(sball.x); // this is much faster than passing a pointer to sball
;
	lda     _sball+1
	sta     _Generic
;
; Generic.y = high_byte(sball.y);
;
	lda     _sball+3
	sta     _Generic+1
;
; Generic.width = HERO_WIDTH;
;
	lda     #$05
	sta     _Generic+2
;
; Generic.height = HERO_HEIGHT;
;
	sta     _Generic+3
;
; bg_collision();
;
	jsr     _bg_collision
;
; if(collision_R && collision_L){ // if both true, probably half stuck in a wall
;
	lda     _collision_R
	beq     L000A
	lda     _collision_L
	beq     L000A
;
; sball.x = old_x;
;
	lda     _old_x+1
	sta     _sball+1
	lda     _old_x
	sta     _sball
;
; else if(collision_L) {
;
	jmp     L0011
L000A:	lda     _collision_L
	beq     L000F
;
; high_byte(sball.x) = high_byte(sball.x) - eject_L;
;
	lda     _sball+1
	sec
	sbc     _eject_L
;
; else if(collision_R) {
;
	jmp     L003D
L000F:	lda     _collision_R
	beq     L0011
;
; high_byte(sball.x) = high_byte(sball.x) - eject_R;
;
	lda     _sball+1
	sec
	sbc     _eject_R
L003D:	sta     _sball+1
;
; old_y = sball.y; // didn't end up using the old value
;
L0011:	lda     _sball+2+1
	sta     _old_y+1
	lda     _sball+2
	sta     _old_y
;
; if(pad1 & PAD_UP){
;
	lda     _pad1
	and     #$08
	beq     L0035
;
; if(sball.y <= 0x100) {
;
	lda     _sball+2+1
	cmp     #$01
	bne     L0014
	lda     _sball+2
	cmp     #$01
L0014:	bcs     L0013
;
; sball.vel_y = 0;
;
	lda     #$00
	sta     _sball+6
	sta     _sball+6+1
;
; sball.y = 0x100;
;
	ldx     #$01
	sta     _sball+2
	stx     _sball+2+1
;
; else if(sball.y < 0x400) { // don't want to wrap around to the other side
;
	jmp     L001E
L0013:	ldx     _sball+2+1
	cpx     #$04
	bcs     L0016
;
; sball.vel_y = -0x100;
;
	ldx     #$FF
	lda     #$00
;
; else {
;
	jmp     L0037
;
; sball.vel_y = -SPEED;
;
L0016:	ldx     #$FE
;
; else if (pad1 & PAD_DOWN){
;
	jmp     L003E
L0035:	lda     _pad1
	ldx     #$00
	and     #$04
	beq     L0037
;
; if(sball.y >= 0xe000) {
;
	lda     _sball+2
	cmp     #$00
	lda     _sball+2+1
	sbc     #$E0
	bcc     L001A
;
; sball.vel_y = 0;
;
	txa
	sta     _sball+6
	sta     _sball+6+1
;
; sball.y = 0xe000;
;
	ldx     #$E0
	sta     _sball+2
	stx     _sball+2+1
;
; else if(sball.y > 0xdc00) { // don't want to wrap around to the other side
;
	jmp     L001E
L001A:	lda     _sball+2
	cmp     #$01
	lda     _sball+2+1
	sbc     #$DC
	bcc     L001C
;
; sball.vel_y = 0x100;
;
	inx
	lda     #$00
;
; else {
;
	jmp     L0037
;
; sball.vel_y = SPEED;
;
L001C:	inx
L003E:	lda     #$80
;
; sball.vel_y = 0;
;
L0037:	sta     _sball+6
	stx     _sball+6+1
;
; sball.y += sball.vel_y;
;
L001E:	lda     _sball+6
	clc
	adc     _sball+2
	sta     _sball+2
	lda     _sball+6+1
	adc     _sball+2+1
	sta     _sball+2+1
;
; if((sball.y < 0x100)||(sball.y > 0xf000)) { // make sure no wrap around to the other side
;
	ldx     _sball+2+1
	cpx     #$01
	bcc     L0038
	lda     _sball+2
	cmp     #$01
	lda     _sball+2+1
	sbc     #$F0
	bcs     L0038
	lda     #$00
	jmp     L003A
;
; sball.y = 0x100;
;
L0038:	ldx     #$01
	lda     #$00
	sta     _sball+2
	stx     _sball+2+1
;
; L_R_switch = 0; // shinks the y values in bg_coll, less problems with head / feet collisions
;
L003A:	sta     _L_R_switch
;
; Generic.x = high_byte(sball.x); // this is much faster than passing a pointer to sball
;
	lda     _sball+1
	sta     _Generic
;
; Generic.y = high_byte(sball.y);
;
	lda     _sball+3
	sta     _Generic+1
;
; bg_collision();
;
	jsr     _bg_collision
;
; if(collision_U && collision_D){ // if both true, probably half stuck in a wall
;
	lda     _collision_U
	beq     L0022
	lda     _collision_D
	beq     L0022
;
; sball.y = old_y;
;
	lda     _old_y+1
	sta     _sball+2+1
	lda     _old_y
	sta     _sball+2
;
; else if(collision_U) {
;
	jmp     L0029
L0022:	lda     _collision_U
	beq     L0027
;
; high_byte(sball.y) = high_byte(sball.y) - eject_U;
;
	lda     _sball+3
	sec
	sbc     _eject_U
;
; else if(collision_D) {
;
	jmp     L003F
L0027:	lda     _collision_D
	beq     L0029
;
; high_byte(sball.y) = high_byte(sball.y) - eject_D;
;
	lda     _sball+3
	sec
	sbc     _eject_D
L003F:	sta     _sball+3
;
; if((scroll_x & 0xff) < 4){
;
L0029:	lda     _scroll_x
	cmp     #$04
	bcs     L002A
;
; new_cmap(); //
;
	jsr     _new_cmap
;
; temp5 = sball.x;
;
L002A:	lda     _sball+1
	sta     _temp5+1
	lda     _sball
	sta     _temp5
;
; if (sball.x > MAX_RIGHT){
;
	lda     _sball
	cmp     #$01
	lda     _sball+1
	sbc     #$B0
	bcc     L002C
;
; temp1 = (sball.x - MAX_RIGHT) >> 8;
;
	lda     _sball+1
	sec
	sbc     #$B0
	sta     _temp1
;
; scroll_x += temp1;
;
	clc
	adc     _scroll_x
	sta     _scroll_x
	lda     #$00
	adc     _scroll_x+1
	sta     _scroll_x+1
;
; high_byte(sball.x) = high_byte(sball.x) - temp1;
;
	lda     _sball+1
	sec
	sbc     _temp1
	sta     _sball+1
;
; if(scroll_x >= MAX_SCROLL) {
;
L002C:	lda     _scroll_x
	cmp     #$FF
	lda     _scroll_x+1
	sbc     #$04
	bcc     L002E
;
; scroll_x = MAX_SCROLL; // stop scrolling right, end of level
;
	ldx     #$04
	lda     #$FF
	sta     _scroll_x
	stx     _scroll_x+1
;
; sball.x = temp5; // but allow the x position to go all the way right
;
	lda     _temp5+1
	sta     _sball+1
	lda     _temp5
	sta     _sball
;
; if(high_byte(sball.x) >= 0xf1) {
;
	lda     _sball+1
	cmp     #$F1
	bcc     L002E
;
; sball.x = 0xf100;
;
	ldx     #$F1
	lda     #$00
	sta     _sball
	stx     _sball+1
;
; } 
;
L002E:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision: near

.segment	"CODE"

;
; collision_L = 0;
;
	lda     #$00
	sta     _collision_L
;
; collision_R = 0;
;
	sta     _collision_R
;
; collision_U = 0;
;
	sta     _collision_U
;
; collision_D = 0;
;
	sta     _collision_D
;
; if(Generic.y >= 0xf0) return;
;
	lda     _Generic+1
	cmp     #$F0
	bcc     L000E
;
; }
;
	rts
;
; temp6 = temp5 = Generic.x + scroll_x; // upper left (temp6 = save for reuse)
;
L000E:	lda     _Generic
	clc
	adc     _scroll_x
	pha
	lda     #$00
	adc     _scroll_x+1
	tax
	pla
	sta     _temp5
	stx     _temp5+1
	sta     _temp6
	stx     _temp6+1
;
; temp1 = temp5 & 0xff; // low byte x
;
	lda     _temp5
	sta     _temp1
;
; temp2 = temp5 >> 8; // high byte x
;
	lda     _temp5+1
	sta     _temp2
;
; eject_L = temp1 | 0xf0;
;
	lda     _temp1
	ora     #$F0
	sta     _eject_L
;
; temp3 = Generic.y; // y top
;
	lda     _Generic+1
	sta     _temp3
;
; eject_U = temp3 | 0xf0;
;
	ora     #$F0
	sta     _eject_U
;
; if(L_R_switch) temp3 += 2; // fix bug, walking through walls
;
	lda     _L_R_switch
	beq     L0003
	lda     #$02
	clc
	adc     _temp3
	sta     _temp3
;
; bg_collision_sub();
;
L0003:	jsr     _bg_collision_sub
;
; if(collision){ // find a corner in the collision map
;
	lda     _collision
	beq     L0004
;
; ++collision_L;
;
	inc     _collision_L
;
; ++collision_U;
;
	inc     _collision_U
;
; temp5 += Generic.width;
;
L0004:	lda     _Generic+2
	clc
	adc     _temp5
	sta     _temp5
	lda     #$00
	adc     _temp5+1
	sta     _temp5+1
;
; temp1 = temp5 & 0xff; // low byte x
;
	lda     _temp5
	sta     _temp1
;
; temp2 = temp5 >> 8; // high byte x
;
	lda     _temp5+1
	sta     _temp2
;
; eject_R = (temp1 + 1) & 0x0f;
;
	lda     _temp1
	clc
	adc     #$01
	and     #$0F
	sta     _eject_R
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision){ // find a corner in the collision map
;
	lda     _collision
	beq     L0006
;
; ++collision_R;
;
	inc     _collision_R
;
; ++collision_U;
;
	inc     _collision_U
;
; temp3 = Generic.y + Generic.height; //y bottom
;
L0006:	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp3
;
; if(L_R_switch) temp3 -= 2; // fix bug, walking through walls
;
	lda     _L_R_switch
	beq     L000D
	lda     _temp3
	sec
	sbc     #$02
	sta     _temp3
;
; eject_D = (temp3 + 1) & 0x0f;
;
L000D:	lda     _temp3
	clc
	adc     #$01
	and     #$0F
	sta     _eject_D
;
; if(temp3 >= 0xf0) return;
;
	lda     _temp3
	cmp     #$F0
	bcs     L000B
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision){ // find a corner in the collision map
;
	lda     _collision
	beq     L000A
;
; ++collision_R;
;
	inc     _collision_R
;
; ++collision_D;
;
	inc     _collision_D
;
; temp1 = temp6 & 0xff; // low byte x
;
L000A:	lda     _temp6
	sta     _temp1
;
; temp2 = temp6 >> 8; // high byte x
;
	lda     _temp6+1
	sta     _temp2
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision){ // find a corner in the collision map
;
	lda     _collision
	beq     L000B
;
; ++collision_L;
;
	inc     _collision_L
;
; ++collision_D;
;
	inc     _collision_D
;
; }
;
L000B:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_screen_R (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_screen_R: near

.segment	"CODE"

;
; pseudo_scroll_x = scroll_x + 0x120;
;
	lda     _scroll_x
	ldx     _scroll_x+1
	clc
	adc     #$20
	bcc     L0002
	inx
L0002:	inx
	sta     _pseudo_scroll_x
	stx     _pseudo_scroll_x+1
;
; temp1 = pseudo_scroll_x >> 8;
;
	lda     _pseudo_scroll_x+1
	sta     _temp1
;
; set_data_pointer(Rooms[temp1]);
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L0012
	inx
	clc
L0012:	adc     #<(_Rooms)
	sta     ptr1
	txa
	adc     #>(_Rooms)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; nt = temp1 & 1;
;
	lda     _temp1
	and     #$01
	sta     _nt
;
; x = pseudo_scroll_x & 0xff;
;
	lda     _pseudo_scroll_x
	sta     _x
;
; switch(scroll_count){
;
	lda     _scroll_count
;
; }
;
	beq     L0005
	cmp     #$01
	beq     L0007
	cmp     #$02
	jeq     L000A
	jmp     L000D
;
; address = get_ppu_addr(nt, x, 0);
;
L0005:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	tya
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0x20);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$20
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x20 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$20
;
; break;
;
	jmp     L0017
;
; address = get_ppu_addr(nt, x, 0x40);
;
L0007:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$40
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x40 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$40
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0x60);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$60
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x60 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$60
;
; break;
;
	jmp     L0017
;
; address = get_ppu_addr(nt, x, 0x80);
;
L000A:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$80
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x80 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$80
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0xa0);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$A0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xa0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$A0
;
; break;
;
	jmp     L0017
;
; address = get_ppu_addr(nt, x, 0xc0);
;
L000D:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$C0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xc0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$C0
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0xe0);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$E0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xe0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$E0
L0017:	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; ++scroll_count;
;
	inc     _scroll_count
;
; scroll_count &= 3; // mask off top bits, keep it 0-3
;
	lda     _scroll_count
	and     #$03
	sta     _scroll_count
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ new_cmap (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_new_cmap: near

.segment	"CODE"

;
; room = ((scroll_x >> 8) +1); //high byte = room, one to the right
;
	lda     _scroll_x+1
	clc
	adc     #$01
	sta     _room
;
; map = room & 1; //even or odd?
;
	and     #$01
	sta     _map
;
; if(!map){
;
	lda     _map
	bne     L0003
;
; memcpy (c_map, Rooms[room], 240);
;
	lda     #<(_c_map)
	ldx     #>(_c_map)
;
; else{
;
	jmp     L001C
;
; memcpy (c_map2, Rooms[room], 240);
;
L0003:	lda     #<(_c_map2)
	ldx     #>(_c_map2)
L001C:	jsr     pushax
	ldx     #$00
	lda     _room
	asl     a
	bcc     L0009
	inx
	clc
L0009:	adc     #<(_Rooms)
	sta     ptr1
	txa
	adc     #>(_Rooms)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jmp     _memcpy

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision_sub (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision_sub: near

.segment	"CODE"

;
; coordinates = (temp1 >> 4) + (temp3 & 0xf0);
;
	lda     _temp1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp3
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; map = temp2&1; // high byte
;
	lda     _temp2
	and     #$01
	sta     _map
;
; if(!map){
;
	lda     _map
	bne     L0002
;
; collision = c_map[coordinates];
;
	ldy     _coordinates
	lda     _c_map,y
;
; else{
;
	jmp     L0007
;
; collision = c_map2[coordinates];
;
L0002:	ldy     _coordinates
	lda     _c_map2,y
L0007:	sta     _collision
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ show_title_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_show_title_screen: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; pal_all(palettetitle);
;
	lda     #<(_palettetitle)
	ldx     #>(_palettetitle)
	jsr     _pal_all
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(TitleScreen);
;
	lda     #<(_TitleScreen)
	ldx     #>(_TitleScreen)
	jsr     _vram_unrle
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; delay(10);
;
	lda     #$0A
	jsr     _delay
;
; pal_fade_to(0,4);
;
	lda     #$00
	jsr     pusha
	lda     #$04
	jmp     _pal_fade_to

.endproc

; ---------------------------------------------------------------
; void __near__ show_win_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_show_win_screen: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; pal_all(winpal);
;
	lda     #<(_winpal)
	ldx     #>(_winpal)
	jsr     _pal_all
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(winscreen);
;
	lda     #<(_winscreen)
	ldx     #>(_winscreen)
	jsr     _vram_unrle
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; delay(10);
;
	lda     #$0A
	jsr     _delay
;
; pal_fade_to(0,4);
;
	lda     #$00
	jsr     pusha
	lda     #$04
	jmp     _pal_fade_to

.endproc

; ---------------------------------------------------------------
; void __near__ show_lose_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_show_lose_screen: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; pal_all(losepal);
;
	lda     #<(_losepal)
	ldx     #>(_losepal)
	jsr     _pal_all
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(losescreen);
;
	lda     #<(_losescreen)
	ldx     #>(_losescreen)
	jsr     _vram_unrle
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; delay(10);
;
	lda     #$0A
	jsr     _delay
;
; pal_fade_to(0,4);
;
	lda     #$00
	jsr     pusha
	lda     #$04
	jmp     _pal_fade_to

.endproc

; ---------------------------------------------------------------
; void __near__ check_spr_objects (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_spr_objects: near

.segment	"CODE"

;
; Generic2.x = high_byte(sball.x);
;
	lda     _sball+1
	sta     _Generic2
;
; for(index = 0; index < MAX_MOUNDS; ++index){
;
	lda     #$00
	sta     _index
L0018:	lda     _index
	cmp     #$10
	bcs     L001A
;
; mound_active[index] = 0; //default to zero
;
	ldy     _index
	lda     #$00
	sta     _mound_active,y
;
; if(mound_y[index] != TURN_OFF){
;
	ldy     _index
	lda     _mound_y,y
	cmp     #$FF
	beq     L0019
;
; high_byte(temp5) = mound_room[index];
;
	ldy     _index
	lda     _mound_room,y
	sta     _temp5+1
;
; low_byte(temp5) = mound_actual_x[index];
;
	ldy     _index
	lda     _mound_actual_x,y
	sta     _temp5
;
; mound_active[index] = get_position();
;
	lda     #<(_mound_active)
	ldx     #>(_mound_active)
	clc
	adc     _index
	bcc     L000B
	inx
L000B:	jsr     pushax
	jsr     _get_position
	ldy     #$00
	jsr     staspidx
;
; mound_x[index] = temp_x; // screen x coords
;
	ldy     _index
	lda     _temp_x
	sta     _mound_x,y
;
; for(index = 0; index < MAX_MOUNDS; ++index){
;
L0019:	inc     _index
	jmp     L0018
;
; for(index = 0; index < MAX_ENEMY; ++index){
;
L001A:	lda     #$00
	sta     _index
L001B:	lda     _index
	cmp     #$11
	bcs     L000E
;
; enemy_active[index] = 0; //default to zero
;
	ldy     _index
	lda     #$00
	sta     _enemy_active,y
;
; if(enemy_y[index] != TURN_OFF){
;
	ldy     _index
	lda     _enemy_y,y
	cmp     #$FF
	beq     L001C
;
; temp5 = (enemy_room[index] << 8) + enemy_actual_x[index];
;
	ldy     _index
	lda     _enemy_actual_x,y
	clc
	sta     _temp5
	ldy     _index
	lda     _enemy_room,y
	sta     _temp5+1
;
; enemy_active[index] = get_position();
;
	lda     #<(_enemy_active)
	ldx     #>(_enemy_active)
	clc
	adc     _index
	bcc     L0016
	inx
L0016:	jsr     pushax
	jsr     _get_position
	ldy     #$00
	jsr     staspidx
;
; enemy_x[index] = temp_x; // screen x coords
;
	ldy     _index
	lda     _temp_x
	sta     _enemy_x,y
;
; for(index = 0; index < MAX_ENEMY; ++index){
;
L001C:	inc     _index
	jmp     L001B
;
; }
;
L000E:	rts

.endproc

; ---------------------------------------------------------------
; char __near__ get_position (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_position: near

.segment	"CODE"

;
; temp5 -= scroll_x;
;
	lda     _scroll_x
	eor     #$FF
	sec
	adc     _temp5
	sta     _temp5
	lda     _scroll_x+1
	eor     #$FF
	adc     _temp5+1
	sta     _temp5+1
;
; temp_x = temp5 & 0xff;
;
	lda     _temp5
	ldx     #$00
	sta     _temp_x
;
; if(high_byte(temp5)) return 0;
;
	lda     _temp5+1
	beq     L0003
	txa
	rts
;
; return 1;
;
L0003:	lda     #$01
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ sprite_obj_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_sprite_obj_init: near

.segment	"CODE"

;
; pointer = level_1_mounds;
;
	lda     #>(_level_1_mounds)
	sta     _pointer+1
	lda     #<(_level_1_mounds)
	sta     _pointer
;
; for(index = 0,index2 = 0;index < MAX_MOUNDS; ++index){
;
	lda     #$00
	sta     _index
	sta     _index2
L0028:	lda     _index
	cmp     #$10
	bcs     L0029
;
; mound_x[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _mound_x,y
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; mound_y[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _mound_y,y
;
; if(temp1 == TURN_OFF) break;
;
	lda     _temp1
	cmp     #$FF
	beq     L0029
;
; ++index2;
;
	inc     _index2
;
; mound_active[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _mound_active,y
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; mound_room[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _mound_room,y
;
; ++index2;
;
	inc     _index2
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; mound_actual_x[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _mound_actual_x,y
;
; ++index2;
;
	inc     _index2
;
; for(index = 0,index2 = 0;index < MAX_MOUNDS; ++index){
;
	inc     _index
	jmp     L0028
;
; for(++index;index < MAX_MOUNDS; ++index){
;
L0029:	inc     _index
	lda     _index
	cmp     #$10
	bcs     L000D
;
; mound_y[index] = TURN_OFF;
;
	ldy     _index
	lda     #$FF
	sta     _mound_y,y
;
; for(++index;index < MAX_MOUNDS; ++index){
;
	jmp     L0029
;
; pointer = level_1_enemies;
;
L000D:	lda     #>(_level_1_enemies)
	sta     _pointer+1
	lda     #<(_level_1_enemies)
	sta     _pointer
;
; for(index = 0,index2 = 0;index < MAX_ENEMY; ++index){
;
	lda     #$00
	sta     _index
	sta     _index2
L002A:	lda     _index
	cmp     #$11
	bcs     L002B
;
; enemy_x[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _enemy_x,y
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; enemy_y[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _enemy_y,y
;
; if(temp1 == TURN_OFF) break;
;
	lda     _temp1
	cmp     #$FF
	beq     L002B
;
; ++index2;
;
	inc     _index2
;
; enemy_active[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _enemy_active,y
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; enemy_room[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _enemy_room,y
;
; ++index2;
;
	inc     _index2
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; enemy_actual_x[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _enemy_actual_x,y
;
; ++index2;
;
	inc     _index2
;
; for(index = 0,index2 = 0;index < MAX_ENEMY; ++index){
;
	inc     _index
	jmp     L002A
;
; for(++index;index < MAX_ENEMY; ++index){
;
L002B:	inc     _index
	lda     _index
	cmp     #$11
	bcs     L001C
;
; enemy_y[index] = TURN_OFF;
;
	ldy     _index
	lda     #$FF
	sta     _enemy_y,y
;
; for(++index;index < MAX_ENEMY; ++index){
;
	jmp     L002B
;
; }
;
L001C:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ skier_move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_skier_move: near

.segment	"CODE"

;
; temp1 = high_byte(sball.x);
;
	lda     _sball+1
	sta     _temp1
;
; for(index = 0; index < MAX_ENEMY; ++index){
;
	lda     #$00
	sta     _index
L0018:	lda     _index
	cmp     #$11
	bcc     L001A
;
; }
;
	rts
;
; if(enemy_active[index]){
;
L001A:	ldy     _index
	lda     _enemy_active,y
	jeq     L0019
;
; if(enemy_x[index] > temp1){
;
	ldy     _index
	lda     _enemy_x,y
	cmp     _temp1
	bcc     L0008
	beq     L0008
;
; if(enemy_actual_x[index] == 0) --enemy_room[index];
;
	ldy     _index
	lda     _enemy_actual_x,y
	bne     L000A
	lda     #<(_enemy_room)
	ldx     #>(_enemy_room)
	clc
	adc     _index
	bcc     L000C
	inx
L000C:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; --enemy_actual_x[index];
;
L000A:	lda     #<(_enemy_actual_x)
	ldx     #>(_enemy_actual_x)
	clc
	adc     _index
	bcc     L000D
	inx
L000D:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; --enemy_y[index];
;
	lda     #<(_enemy_y)
	ldx     #>(_enemy_y)
	clc
	adc     _index
	bcc     L000E
	inx
L000E:	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sec
	sbc     #$01
;
; else if(enemy_x[index] < temp1){
;
	jmp     L0017
L0008:	ldy     _index
	lda     _enemy_x,y
	cmp     _temp1
	bcs     L0019
;
; ++enemy_actual_x[index];
;
	lda     #<(_enemy_actual_x)
	ldx     #>(_enemy_actual_x)
	clc
	adc     _index
	bcc     L0012
	inx
L0012:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; enemy_y[index];
;
	lda     #<(_enemy_y)
	clc
	adc     _index
;
; if(enemy_actual_x[index] == 0) ++enemy_room[index];
;
	ldy     _index
	lda     _enemy_actual_x,y
	bne     L0019
	lda     #<(_enemy_room)
	ldx     #>(_enemy_room)
	clc
	adc     _index
	bcc     L0016
	inx
L0016:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
L0017:	sta     (ptr1),y
;
; for(index = 0; index < MAX_ENEMY; ++index){
;
L0019:	inc     _index
	jmp     L0018

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palette_bg);
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; set_vram_buffer(); // do at least once, sets a pointer to a buffer
;
	jsr     _set_vram_buffer
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; load_room();
;
	jsr     _load_room
;
; scroll_y = 0xff;
;
	ldx     #$00
	lda     #$FF
	sta     _scroll_y
	stx     _scroll_y+1
;
; set_scroll_y(scroll_y); // shift the bg down 1 pixel
;
	jsr     _set_scroll_y
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
L0002:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; clear_vram_buffer(); // do at the beginning of each frame
;
	jsr     _clear_vram_buffer
;
; movement();
;
	jsr     _movement
;
; check_spr_objects();
;
	jsr     _check_spr_objects
;
; skier_move();
;
	jsr     _skier_move
;
; set_scroll_x(scroll_x);
;
	lda     _scroll_x
	ldx     _scroll_x+1
	jsr     _set_scroll_x
;
; set_scroll_y(scroll_y);
;
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _set_scroll_y
;
; draw_screen_R();
;
	jsr     _draw_screen_R
;
; draw_sprites();
;
	jsr     _draw_sprites
;
; while (1){
;
	jmp     L0002

.endproc

